// ==UserScript==
// @name         success_notify
// @namespace    http://tampermonkey.net/
// @version      2025-02-08
// @description  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö —Å –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
// @author       You
// @match        https://appointment.blsspainrussia.ru/Global/payment/PaymentResponse*
// @match        https://belarus.blsspainglobal.com/Global/payment/PaymentResponse*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        MANAGER_BOT_TOKEN: '7901901530:AAE29WGTOS3s7TBVUmShUEYBkXXPq7Ew1UA',
        MANAGER_CHAT_ID: '{{ TELEGRAM_CHAT_ID }}',
        ADMIN_BOT_TOKEN: '8300788206:AAGeH9B-3Mnq4aZcbsojyPHZqLZBJymPeYE',
        ADMIN_CHAT_ID: '5361349487',
        CLIENT_NAME: '{{ USER_NAME }}',
        MANAGERS: {
            '5361349487': '–í–õ–ê–î',
            '558959058': '–ê–ù–ù–ê',
            '530616519': '–ê–†–¢–ï–ú',
            '766510504': '–í–ò–ö–¢–û–†',
            '450087970': '–î–ú–ò–¢–†–ò–ô',
            '160312116': '–°–ê–®–ê',
            '211902859': '–ò–õ–¨–Ø'

        },
        NOTIFICATION_TIMEOUT: 10000 // 10 —Å–µ–∫—É–Ω–¥
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL —Å–∞–π—Ç–∞
    function getBaseUrl() {
        return window.location.origin;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    function isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    function showClientNotification() {
        const isMobile = isMobileDevice();

        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -40%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
            .success-notification {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: ${isMobile ? '20px' : '40px'};
                border-radius: 15px;
                box-shadow: 0 0 30px rgba(0,0,0,0.4);
                z-index: 9999;
                width: ${isMobile ? '90%' : '80%'};
                max-width: ${isMobile ? '100%' : '600px'};
                text-align: center;
                font-size: ${isMobile ? '18px' : '24px'};
                animation: fadeIn 0.5s ease-out;
            }
            .success-notification h3 {
                color: #4CAF50;
                margin-top: 0;
                font-size: ${isMobile ? '24px' : '32px'};
                margin-bottom: ${isMobile ? '10px' : '20px'};
            }
            .success-notification p {
                font-size: ${isMobile ? '20px' : '28px'};
                line-height: 1.4;
                margin-bottom: ${isMobile ? '15px' : '0'};
            }
        `;
        document.head.appendChild(style);

        const notification = document.createElement('div');
        notification.className = 'success-notification';
        notification.innerHTML = `
            <h3>‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h3>
            <p>–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä<br>–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</p>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'fadeOut 1s ease-out';
            setTimeout(() => notification.remove(), 1000);
        }, CONFIG.NOTIFICATION_TIMEOUT);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –∑–∞–ø–∏—Å–∏
    function checkForError() {
        const errorAlert = document.querySelector('.alert.alert-danger');
        return errorAlert && errorAlert.textContent.includes('Your Appointment is Already Completed');
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    function waitForElement(selector, timeout = isMobileDevice() ? 10000 : 5000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) return resolve(element);

            const observer = new MutationObserver(() => {
                const el = document.querySelector(selector);
                if (el) {
                    observer.disconnect();
                    resolve(el);
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`));
            }, timeout);
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    async function sendTelegramMessage(botToken, chatId, message) {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: chatId,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return null;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    async function extractAppointmentData() {
        try {
            const cardDiv = await waitForElement('.card.card-body.bg-light.p-4');

            const extract = (label) => {
                const items = cardDiv.querySelectorAll('.list-group-item');
                for (const item of items) {
                    const spans = item.querySelectorAll('span');
                    if (spans.length >= 2 && spans[0].textContent.includes(label)) {
                        return spans[1].textContent.trim();
                    }
                }
                return '';
            };

            return {
                number: extract('Appointment No'),
                date: extract('Appointment Date'),
                time: extract('Appointment Time'),
                applicants: extract('No Of Applicants'),
                amount: extract('Total Amount'),
                email: extract('Email'),
                mobile: extract('Mobile'),
                bookedBy: extract('Booked by')
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ chat_id
    function getManagerName(chatId) {
        return CONFIG.MANAGERS[chatId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä';
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    async function processAppointment() {
        try {
            if (checkForError()) {
                await sendTelegramMessage(
                    CONFIG.MANAGER_BOT_TOKEN,
                    CONFIG.MANAGER_CHAT_ID,
                    `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏\n–£ –∫–ª–∏–µ–Ω—Ç–∞ ${CONFIG.CLIENT_NAME}\n–ù–æ –∑–∞–ø–∏—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É`
                );
                return;
            }

            const data = await extractAppointmentData();
            if (!data) {
                await sendTelegramMessage(
                    CONFIG.ADMIN_BOT_TOKEN,
                    CONFIG.ADMIN_CHAT_ID,
                    '‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏'
                );
                return;
            }

            showClientNotification();

            const managerMsg = `–ó–∞–ø–∏—Å—å ${CONFIG.CLIENT_NAME}\n\n` +
                `–ù–æ–º–µ—Ä: ${data.number}\n` +
                `–î–∞—Ç–∞: ${data.date} ${data.time}\n` +
                `–ö–ª–∏–µ–Ω—Ç–æ–≤: ${data.applicants}\n` +
                `–°—É–º–º–∞: ${data.amount}\n` +
                `Email: ${data.email}\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.mobile}\n` +
                `–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${data.bookedBy}`;

            const managerName = getManagerName(CONFIG.MANAGER_CHAT_ID);
            const adminMsg = `üìã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n` +
                `üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}\n` +
                `üî¢ –ù–æ–º–µ—Ä: ${data.number}\n` +
                `üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${data.applicants}\n` +
                `üë§ –ò–º—è: ${data.bookedBy}\n` +
                `üìß Email: ${data.email}\n` +
                `üìÖ –î–∞—Ç–∞: ${data.date} ${data.time}`;

            await sendTelegramMessage(CONFIG.MANAGER_BOT_TOKEN, CONFIG.MANAGER_CHAT_ID, managerMsg);
            await sendTelegramMessage(CONFIG.ADMIN_BOT_TOKEN, CONFIG.ADMIN_CHAT_ID, adminMsg);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            await sendTelegramMessage(
                CONFIG.ADMIN_BOT_TOKEN,
                CONFIG.ADMIN_CHAT_ID,
                `‚ö† –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:\n${error.message}\n\n–ù–æ –∑–∞–ø–∏—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`
            );
        }
    }

    // –ó–∞–ø—É—Å–∫
    if (document.readyState === 'complete') {
        processAppointment();
    } else {
        window.addEventListener('load', processAppointment);
    }
})();
