// ==UserScript==
// @name         success_notify
// @namespace    http://tampermonkey.net/
// @version      2025-02-08
// @description  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö —Å –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
// @author       You
// @match        https://appointment.blsspainrussia.ru/Global/payment/PaymentResponse*
// @match        https://appointment.blsspainbelarus.by/Global/payment/PaymentResponse*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    const CONFIG = {
        MANAGER_BOT_TOKEN: '7901901530:AAE29WGTOS3s7TBVUmShUEYBkXXPq7Ew1UA',
        MANAGER_CHAT_ID: '{{ TELEGRAM_CHAT_ID }}',
        ADMIN_BOT_TOKEN: '8300788206:AAGeH9B-3Mnq4aZcbsojyPHZqLZBJymPeYE',
        ADMIN_CHAT_ID: '5361349487',
        CLIENT_NAME: '{{ USER_NAME }}',
        CLIENT_EMAIL: '{{ EMAIL }}',
        CLIENT_PASSWORD: '{{ EMAILPASSWORD }}',
        MANAGERS: {
            '5361349487': '–í–õ–ê–î',
            '558959058': '–ê–ù–ù–ê',
            '530616519': '–ê–†–¢–ï–ú',
            '766510504': '–í–ò–ö–¢–û–†',
            '450087970': '–î–ú–ò–¢–†–ò–ô',
            '160312116': '–°–ê–®–ê',
            '211902859': '–ò–õ–¨–Ø',
            '478555502': '–ï–í–†–û–ü–ê',
            '5838710565': '–ï–í–†–û–ü–ê'
        },
        NOTIFICATION_TIMEOUT: 3000 // –º—Å
    };

    // —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const REDIRECT_URL = 'https://www.google.com/';
    const REDIRECT_DELAY = CONFIG.NOTIFICATION_TIMEOUT + 5000; // —Ç–∞–π–º–∞—É—Ç + –∞–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è

    const ICONS = {
        hallPremium: 'üèõÔ∏è',
        hallNormal: 'üéüÔ∏è',
        number: 'üî¢',
        date: 'üìÖ',
        clients: 'üë•',
        amount: 'üí≥',
        email: 'üìß',
        phone: 'üìû',
        booked: 'üßæ'
    };

    function isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    function showClientNotification(isError = false) {
        const isMobile = isMobileDevice();
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn { from { opacity: 0; transform: translate(-50%,-40%);} to { opacity: 1; transform: translate(-50%,-50%);} }
            @keyframes fadeOut { from { opacity: 1;} to { opacity: 0;} }
            .client-notification{
                position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);
                background:#fff;padding:${isMobile?'20px':'40px'};border-radius:15px;box-shadow:0 0 30px rgba(0,0,0,.4);
                z-index:9999;width:${isMobile?'90%':'80%'};max-width:${isMobile?'100%':'600px'};
                text-align:center;font-size:${isMobile?'18px':'24px'};animation:fadeIn .5s ease-out;
            }
            .client-notification h3{margin:0 0 ${isMobile?'10px':'20px'};font-size:${isMobile?'24px':'32px'}}
            .client-notification.success h3{color:#4CAF50}.client-notification.error h3{color:#f44336}
            .client-notification p{font-size:${isMobile?'20px':'28px'};line-height:1.4;margin-bottom:${isMobile?'15px':'0'}}
        `;
        document.head.appendChild(style);
        const el = document.createElement('div');
        el.className = `client-notification ${isError?'error':'success'}`;
        el.innerHTML = isError
          ? `<h3>‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏</h3><p>–ù–æ –∑–∞–ø–∏—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ<br>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>`
          : `<h3>‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h3><p>–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞<br>`;
        document.body.appendChild(el);
        setTimeout(()=>{ el.style.animation='fadeOut 1s ease-out'; setTimeout(()=>el.remove(),1000); }, CONFIG.NOTIFICATION_TIMEOUT);
    }

    function scheduleRedirect(){
        setTimeout(()=>{ window.location.href = REDIRECT_URL; }, REDIRECT_DELAY);
    }

    function checkForError() {
        const err = document.querySelector('.alert.alert-danger');
        return err && err.textContent.includes('Your Appointment is Already Completed');
    }

    function waitForElement(selector, timeout=1000){
        return new Promise((resolve, reject)=>{
            const first = document.querySelector(selector);
            if (first) return resolve(first);
            const obs = new MutationObserver(()=>{
                const el = document.querySelector(selector);
                if (el){ obs.disconnect(); resolve(el); }
            });
            obs.observe(document.body, {childList:true, subtree:true});
            setTimeout(()=>{ obs.disconnect(); reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`)); }, timeout);
        });
    }

    async function sendTelegramMessage(botToken, chatId, message){
        try{
            const r = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`,{
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: 'HTML' })
            });
            return await r.json();
        }catch(e){ console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e); return null; }
    }

    // ----------- –õ–û–ì–ò–ö–ê –ó–ê–õ–ê -----------
    function toInt(v){
        if (!v) return NaN;
        const digits = String(v).replace(/[^\d]/g,'');
        return digits ? parseInt(digits,10) : NaN;
    }

    // 'Premium' | 'Normal' | ''
    function pickHall(amountRaw, applicantsRaw){
        const amount = toInt(amountRaw);
        const clients = toInt(applicantsRaw);
        if (amount === 13549 && clients === 1) return 'Premium';
        if (amount === 27098 && clients === 2) return 'Premium';
        if (amount === 3549 && clients === 1) return 'Normal';
        if (amount === 7098 && clients === 2) return 'Normal';
        return '';
    }
    // -----------------------------------

    async function extractAppointmentData(){
        try{
            const card = await waitForElement('.card.card-body.bg-light.p-4');
            const extract = (label)=>{
                const items = card.querySelectorAll('.list-group-item');
                for (const it of items){
                    const spans = it.querySelectorAll('span');
                    if (spans.length >= 2 && spans[0].textContent.includes(label)){
                        return spans[1].textContent.trim();
                    }
                }
                return '';
            };
            return {
                number:    extract('Appointment No'),
                date:      extract('Appointment Date'),
                time:      extract('Appointment Time'),
                applicants:extract('No Of Applicants'),
                amount:    extract('Total Amount'),
                email:     extract('Email'),
                mobile:    extract('Mobile'),
                bookedBy:  extract('Booked by')
            };
        }catch(e){ console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e); return null; }
    }

    function getManagerName(id){ return CONFIG.MANAGERS[id] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'; }

    async function processAppointment(){
        try{
            // –ù–ï–£–°–ü–ï–®–ù–û (–¥—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∞–π—Ç–µ)
            if (checkForError()){
                showClientNotification(true);

                const managerName = getManagerName(CONFIG.MANAGER_CHAT_ID);
                const errForManager =
`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏
üë§ –ö–ª–∏–µ–Ω—Ç ${CONFIG.CLIENT_NAME}

–ó–∞–ø–∏—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É

${ICONS.email} –ü–æ—á—Ç–∞: ${CONFIG.CLIENT_EMAIL}
üîë –ü–∞—Ä–æ–ª—å: ${CONFIG.CLIENT_PASSWORD}`;

                const errForAdmin =
`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏
üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üë§ –ö–ª–∏–µ–Ω—Ç ${CONFIG.CLIENT_NAME}
${ICONS.email} –ü–æ—á—Ç–∞: ${CONFIG.CLIENT_EMAIL}
üîë –ü–∞—Ä–æ–ª—å: ${CONFIG.CLIENT_PASSWORD}`;

                await sendTelegramMessage(CONFIG.MANAGER_BOT_TOKEN, CONFIG.MANAGER_CHAT_ID, errForManager);
                await sendTelegramMessage(CONFIG.ADMIN_BOT_TOKEN,   CONFIG.ADMIN_CHAT_ID,   errForAdmin);

                scheduleRedirect();
                return;
            }

            const d = await extractAppointmentData();
            if (!d){
                // —Ä–∞–Ω—å—à–µ –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî —Ç–µ–ø–µ—Ä—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                showClientNotification(true); // –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ç–æ–∂–µ —É–µ–¥–µ–º
                scheduleRedirect();
                return;
            }

            // –£–°–ü–ï–®–ù–û
            showClientNotification();

            const hallType = pickHall(d.amount, d.applicants); // '' | 'Premium' | 'Normal'
            const hallEmoji = hallType === 'Premium' ? ICONS.hallPremium : hallType === 'Normal' ? ICONS.hallNormal : '';
            const hallLine = hallType ? `${hallEmoji} –ó–∞–ª: ${hallType}` : '';

            // –º–µ–Ω–µ–¥–∂–µ—Ä (—Å —ç–º–æ–¥–∑–∏ —É –ø–æ–ª–µ–π)
            const managerMsg =
`–ó–∞–ø–∏—Å—å ${CONFIG.CLIENT_NAME}

${hallType ? `${hallLine}\n` : ''}${ICONS.number} –ù–æ–º–µ—Ä: ${d.number}
${ICONS.date} –î–∞—Ç–∞: ${d.date} ${d.time}
${ICONS.clients} –ö–ª–∏–µ–Ω—Ç–æ–≤: ${d.applicants}
${hallType ? '' : `${ICONS.amount} –°—É–º–º–∞: ${d.amount}\n`}${ICONS.email} Email: ${d.email}
${ICONS.phone} –¢–µ–ª–µ—Ñ–æ–Ω: ${d.mobile}
${ICONS.booked} –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${d.bookedBy}`;

            const managerName = getManagerName(CONFIG.MANAGER_CHAT_ID);

            // –∞–¥–º–∏–Ω (—Å—Ç—Ä–æ–≥–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏, –∫—Ä–æ–º–µ –∑–∞–ª–∞)
            const adminMsg =
`üìã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
${hallType ? `${hallLine}\n` : ''}üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üî¢ –ù–æ–º–µ—Ä: ${d.number}
üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${d.applicants}
üë§ –ò–º—è: ${d.bookedBy}
üìß Email: ${d.email}
üìÖ –î–∞—Ç–∞: ${d.date} ${d.time}`;

            await sendTelegramMessage(CONFIG.MANAGER_BOT_TOKEN, CONFIG.MANAGER_CHAT_ID, managerMsg);
            await sendTelegramMessage(CONFIG.ADMIN_BOT_TOKEN,   CONFIG.ADMIN_CHAT_ID,   adminMsg);

            scheduleRedirect();
        }catch(e){
            console.error('–û—à–∏–±–∫–∞:', e);
            showClientNotification(true);
            await sendTelegramMessage(
                CONFIG.ADMIN_BOT_TOKEN,
                CONFIG.ADMIN_CHAT_ID,
                `‚ö† –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:\n${e.message}\n\n–ù–æ –∑–∞–ø–∏—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`
            );
            scheduleRedirect();
        }
    }

    if (document.readyState === 'complete') processAppointment();
    else window.addEventListener('load', processAppointment);
})();
